// package main

// import (
// 	"encoding/json"
// 	"fmt"
// 	"io"
// 	"log"
// 	"net/http"
// )

// type user struct {
// 	// field names must be public so they can be accessed.
// 	Name string `json:"name"`
// 	Age string `json:"age"`
// 	City string `json:"city"`
// }

// func mainlyPractice() {
// 	port := ":3000"

// 	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request){
// 		//fmt.Fprintf(w, "Hello Root Route")
// 		w.Write([]byte("Hello Root Route"))
// 		fmt.Println("Hello Root Route")
// 	})


// 	http.HandleFunc("/teachers", func(w http.ResponseWriter, r *http.Request){
// 		//fmt.Fprintf(w, "Hello Teachers Route")
// 		//w.Write([]byte("Hello teachers Route"))
// 		//fmt.Println("Hello teachers Route")
// 		fmt.Println(r.Method)
// 		// if r.Method == http.MethodGet {
// 		// 	w.Write([]byte("Hello GET method on teachers Route"))
// 		// 	fmt.Println("Hello GET method on teachers Route")
// 		// 	return
// 		// }
// 		switch r.Method{
// 		case http.MethodGet:

// 			fmt.Println("Body: ", r.Body)
// 			fmt.Println("Form: ", r.Form)
// 			fmt.Println("Header: ", r.Header)
// 			fmt.Println("Context: ", r.Context())
// 			fmt.Println("ContentLength: ", r.ContentLength)
// 			fmt.Println("Host: ", r.Host)
// 			fmt.Println("Method: ", r.Method)
// 			fmt.Println("Protocol: ", r.Proto)
// 			fmt.Println("Remote Addr: ", r.RemoteAddr)
// 			fmt.Println("Request URI: ", r.RequestURI)
// 			fmt.Println("TLS: ", r.TLS)
// 			fmt.Println("Trailer: ", r.Trailer)
// 			fmt.Println("Transfer Encoding: ", r.TransferEncoding)
// 			fmt.Println("URL: ", r.URL)
// 			fmt.Println("User Agent: ", r.UserAgent())
// 			fmt.Println("Port: ", r.URL.Port())
// 			fmt.Println("Path: ", r.URL.Path)
// 			fmt.Println("URL Scheme: ", r.URL.Scheme)
// 			fmt.Println("Req: ", r.URL.RequestURI())

// 			w.Write([]byte("Hello GET method on teachers Route"))
// 			fmt.Println("Hello GET method on teachers Route")
// 		case http.MethodPost:

// 			// start x-www-form-urlencoded

// 			err := r.ParseForm()
// 			if err != nil {
// 				http.Error(w, "Error parsing form", http.StatusBadRequest)
// 				return
// 			}

// 			fmt.Println("Form:", r.Form)

// 			// prepare response data
// 			response := make(map[string]interface{})
// 			for key, value := range r.Form {
// 				response[key] = value[0]
// 			}



// 			fmt.Println("response:", response)

// 			// end x-www-form-urlencoded

// 			// start RAW body
// 			body, err := io.ReadAll(r.Body)
// 			if err != nil {
// 				http.Error(w, "Error parsing body", http.StatusBadRequest)
// 				return
// 			}
// 			defer r.Body.Close()
// 			fmt.Println(string(body))

// 			// If expecting JSON data then unmarshal it

// 			var userInstance user
// 			err = json.Unmarshal(body, &userInstance)
// 			if err != nil {
// 				return 
// 			}

// 			fmt.Println("USER INSTANCE: ", userInstance)

// 			w.Write([]byte("Hello POST method on teachers Route"))
// 			fmt.Println("Hello POST method on teachers Route")
// 		case http.MethodPatch:
// 			w.Write([]byte("Hello PATCH method on teachers Route"))
// 			fmt.Println("Hello PATCH method on teachers Route")
// 		case http.MethodPut:
// 			w.Write([]byte("Hello PUT method on teachers Route"))
// 			fmt.Println("Hello PUT method on teachers Route")
// 		case http.MethodDelete:
// 			w.Write([]byte("Hello DELETE method on teachers Route"))
// 			fmt.Println("Hello DELETE method on teachers Route")
// 		default:
// 		w.Write([]byte("Hello teachers Route"))
// 		fmt.Println("Hello teachers Route")
// 		}
// 	})


// 	http.HandleFunc("/students", func(w http.ResponseWriter, r *http.Request){
// 		//fmt.Fprintf(w, "Hello Students Route")
// 		w.Write([]byte("Hello Students Route"))
// 		fmt.Println("Hello Students Route")
// 	})


// 	http.HandleFunc("/execs", func(w http.ResponseWriter, r *http.Request){
// 		//fmt.Fprintf(w, "Hello execs Route")
// 		w.Write([]byte("Hello Execs Route"))
// 		fmt.Println("Hello Execs Route")
// 	})

// 	fmt.Println("Server is running on port: ",port)
// 	err := http.ListenAndServe(port, nil)
// 	if err != nil {
// 		log.Fatalln("Error starting server", err)
// 	}
// }